
(ns ^{:doc ""
      :author "Kenneth Leung"}
  czlab.fusilli.ttt.C
  (:require
    ;["ccsx" :as cx]
            ;["" :as ecs]
            ["kirby"
             :as K
             :refer [conj! opt?? merge]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const BD_SZ 3)
(const GD_SZ (* BD_SZ BD_SZ))
(const ArrCells #(repeat GD_SZ 0))
(const ArrDim #(repeat BD_SZ 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Grid [ecs/Component]
  "Stores the grid values and the set of winning goals"
  (constructor [seed]
    (assoc! this
            :goals (mapGoalSpace)
            :tpid ::Grid
            :vals (slice seed))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Player [ecs/CStats]
  ""
  (constructor [category value id]
    (super value)
    (assoc! this
            :tpid ::Player
            :color ""
            :pidlong "" :pid "" :id 0
            :category category :pnum id)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Players [ecs/Component]
  ""
  (constructor []
    (assoc! this
            :parr [nil nil nil]
            :tpid ::Players)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype CSquare [ecs/CPixie]
  ""
  (constructor [cell]
    (assoc! this :cell cell :png "z" :value 0))

  (create ^:static [cell]
    (doto (new CSquare cell)
      (.initWithSpriteFrameName "z.png")))

  (toggle [nv]
    (var x (XConfig.cstVal :CV_X)
         o (XConfig.cstVal :CV_O))
    (when (= this.value 0)
      (if (= nv x) (assoc! this :png "x"))
      (if (= nv o) (assoc! this :png "o"))
      (assoc! this :value nv)
      (.setSpriteFrame this (str png ".png"))))

  (flip []
    (if (not= this.value 0)
      (.setSpriteFrame this (str png ".i.png")))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype CSquares [ecs/Component]
  ""
  (constructor []
    ;s_arr<f::Box4,GD_SZ> boxes;
    ;s_arr<CSquare*,GD_SZ> sqs;
    (assoc! this :boxes [] :sqs [] :tpid ::CSquares)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype CellPos [ecs/Component]
  ""
  (constructor []
    (assoc! this :cell -1 :px -1 :py -1 :tpid ::CellPos)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype GVars [ecs/Component]
  ""
  (constructor []
    (assoc! this :pnum -1 :lastWinner -1 :tpid ::GVars)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn fillArray "" [cnt func]
  (var ret [])
  (dotimes [x cnt]
    (conj! ret (func x))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn mapGridPos
  "Calculate position of each individual cells in the grid,
  so that we can detect when a user clicks on the cell"
  [ &[scale] ]
  (set! scale (opt?? scale 1))
  ;;memorize the co-ordinates of each cell on the board, so
  ;;we know which cell the user has clicked on
  (var csz (cx/scaleSize (cx/calcSize "z.png") scale)
       ro (* (/ 8.0 72.0) scale)
       gh (* csz.height ro)
       gw (* csz.width ro)
       zh (+ (* csz.height BD_SZ) (* gh (-1 BD_SZ)))
       zw (+ (* csz.width BD_SZ) (* gw (-1 BD_SZ)))
       boxes (fillArray GD_SZ #(new ecs/Box4))
       wb (cx/visBox)
       x0 (- wb.cx (HTV zw))
       y0 (+ wb.cy (HTV zh))
       x1 x0
       y1 y0)
  (var~ bx x2 y2)
  (for [r 0 :while (< r BD_SZ) :recur (+1 r)]
    (for [c 0 :while (< c BD_SZ) :recur (+1 c)]
      (set! bx (nth boxes (+ c (* r BD_SZ)))
            y2 (- y1 csz.height)
            x2 (+ x1 csz.width))
      (assoc! bx :top y1 :right x2 :bottom y2 :left x1)
      (set! x1 (+ x2 gw)))
    (set! y1 (- y2 gh) x1 x0)) boxes)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn mapGoalSpace "" []
  (var dx (ArrDim) dy (ArrDim) goals [dx dy])
  (var~ h v)
  (for [r 0 :while (< r BD_SZ) :recur (+1 r)]
    (set! h (ArrDim) v (ArrDim))
    (for [c 0 :while (< c BD_SZ) :recur (+1 c)]
      (aset h c (+ c (* r BD_SZ)))
      (aset v c (+ r (* c BD_SZ))))
    (conj! goals h v)
    (aset dx r (+ r (* r BD_SZ)))
    (aset dy r (* (- BD_SZ r 1) (+ BD_SZ r)))) goals)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn fmtGameData "" [mode]
  (cond
    (= mode ecs/GMode.TWO)
    {:ppids {:p1 [1 "player1"]
             :p2 [2 "player2"] }
     :pnum 1}

    (= mode ecs/GMode.ONE)
    {:ppids {:cpu [2 "computer"]
             :p1 [1 "player1"] }
     :pnum 1}

    (= mode ecs/GMode.NET)
    {:ppids {} :pnum 0}

    :else
    (raise! "Bad game mode: " mode)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

