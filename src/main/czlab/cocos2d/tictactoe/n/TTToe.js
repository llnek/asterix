/*Auto generated by Kirby v1.0.0 - Thu Jan 25 2018 02:48:44 GMT-0800 (PST)
  czlab.fusilli.ttt.TTToe
{"doc":"","author":"Kenneth Leung"}
*/

const K= require("kirby");
const conj_BANG=K["conj_BANG"];
const kirbystdlibref= require("kirby");
const __module_namespace__= "czlab.fusilli.ttt.TTToe";
////////////////////////////////////////////////////////////////////////////////
//fn: [notAnyCell?] in file: TTToe.ky, line: 12
const notAnyCell_QMRK = function (arr,v) {
let sz=kirbystdlibref.count(arr);
let ret=(sz > 0);
for (let i=0,____break=false;((!____break) && (i < sz)); i=(i + 1)){
if ((v === kirbystdlibref.getProp(arr,i))) {
(ret=false);
(____break=true);
};
}
return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [everyCell?] in file: TTToe.ky, line: 21
const everyCell_QMRK = function (arr,v) {
let sz=kirbystdlibref.count(arr);
let ret=(sz > 0);
for (let i=0,____break=false;((!____break) && (i < sz)); i=(i + 1)){
if ((v !== kirbystdlibref.getProp(arr,i))) {
(ret=false);
(____break=true);
};
}
return ret;
};
//A Tic Tac Toe board
class TTToe extends ag.GameBoard {
////////////////////////////////////////////////////////////////////////////////
//fn: [constructor] in file: TTToe.ky, line: 32
constructor (p1v,p2v) {
(this["actors"]=[ 0, p1v, p2v ],this["tpid"]="czlab.fusilli.ttt.TTToe/TTTBoard",this["grid"]=ArrCells(),this["goals"]=C.mapGoalSpace());
return this;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [isNil?] in file: TTToe.ky, line: 39
isNil_QMRK (cellv) {
return (cellv === 0);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getFirstMove] in file: TTToe.ky, line: 41
//If brand new game,
//just make a random move
getFirstMove () {
let sz=kirbystdlibref.count(this.grid);
return (((sz > 0) && everyCell_QMRK(this.grid,0)) ?
cx.randInt(sz) :
-1);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [syncState] in file: TTToe.ky, line: 47
syncState (seed,actor) {
(this.grid=Array.prototype.slice.call(seed));
return (this.actors[0]=actor);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getNextMoves] in file: TTToe.ky, line: 51
//Find set of empty slots
getNextMoves (snap) {
let sz=kirbystdlibref.count(snap.state);
let rc=[];
for (let pos=0,____break=false;((!____break) && (pos < sz)); pos=(pos + 1)){
if (this.isNil_QMRK(kirbystdlibref.getProp(snap.state,pos))) {
conj_BANG(rc,pos);
};
}
return rc;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [undoMove] in file: TTToe.ky, line: 58
undoMove (snap,move) {
if (((move >= 0) && (move < kirbystdlibref.count(snap.state)))) {
true;
} else { 
throw new Error("index outofbound");
};
return (snap.state[move]=0);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [makeMove] in file: TTToe.ky, line: 63
makeMove (snap,move) {
if (((move >= 0) && (move < kirbystdlibref.count(snap.state)))) {
true;
} else { 
throw new Error("index outofbound");
};
return (this.isNil_QMRK(kirbystdlibref.getProp(snap.state,move)) ?
(snap.state[move]=snap.cur) :
(function (){ throw new Error([ "cell [", move, "] is not free" ].join(""));}).call(this));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [switchPlayer] in file: TTToe.ky, line: 70
switchPlayer (snap) {
let t=snap.cur;
return (snap["cur"]=kirbystdlibref.getProp(snap,"other"),snap["other"]=t);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getOtherPlayer] in file: TTToe.ky, line: 75
getOtherPlayer (pv) {
return ((pv === kirbystdlibref.getProp(this.actors,1)) ?
kirbystdlibref.getProp(this.actors,2) :
((pv === kirbystdlibref.getProp(this.actors,2)) ?
kirbystdlibref.getProp(this.actors,1) :
(true ?
0 :
null)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [takeFFrame] in file: TTToe.ky, line: 83
takeFFrame () {
let ff=new ag.FFrame(BD_SZ);
(ff["other"]=this.getOtherPlayer(kirbystdlibref.getProp(this.actors,0)),ff["cur"]=kirbystdlibref.getProp(this.actors,0),ff["lastBestMove"]=-1);
this.grid.map(function (v,i) {
return (ff.state[i]=v);
});
return ff;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [evalScore] in file: TTToe.ky, line: 93
evalScore (snap) {
let ret=0;
for (let i=0,sz=kirbystdlibref.count(this.goals),____break=false;((!____break) && (i < sz)); i=(i + 1)){
if (this.testWin(snap.state,snap.other,this.goals[i])) {
(ret=-100);
(____break=true);
};
}
return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [isOver] in file: TTToe.ky, line: 105
isOver (snap) {
let ret=false;
let t=null;
for (let i=0,sz=kirbystdlibref.count(this.goals),____break=false;((!____break) && (i < sz)); i=(i + 1)){
(t=this.goals[i]);
if ((this.testWin(snap.state,snap.other,t) || this.testWin(snap.state,snap.cur,t))) {
(ret=true);
(____break=true);
};
}
return ((!ret) ?
this.isStalemate_QMRK(snap) :
ret);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [isStalemate?] in file: TTToe.ky, line: 116
isStalemate_QMRK (snap) {
return notAnyCell_QMRK(snap.state,0);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getWinner] in file: TTToe.ky, line: 118
getWinner (snap,combo) {
let t=null;
let win=-1;
for (let i=0,sz=kirbystdlibref.count(this.goals),____break=false;((!____break) && (i < sz)); i=(i + 1)){
(t=this.goals[i]);
if (this.testWin(snap.state,snap.other,t)) {
(win=snap.other);
} else { 
if (this.testWin(snap.state,snap.cur,t)) {
(win=snap.cur);
} else { 
null;
};
};
if ((win > 0)) {
t.map(function (v,i) {
return (combo[i]=v);
});
(____break=true);
};
}
return win;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [testWin] in file: TTToe.ky, line: 133
testWin (vs,actor,g) {
let cnt=kirbystdlibref.count(g);
for (let n=0,sz=cnt,____break=false;((!____break) && (n < sz)); n=(n + 1)){
if ((actor === kirbystdlibref.getProp(vs,kirbystdlibref.getProp(g,n)))) {
--cnt;
};
}
return (cnt === 0);
};
}
module.exports = {
da57bc0172fb42438a11e6e8778f36fb: { ns: "czlab.fusilli.ttt.TTToe", macros: {} },
TTToe:TTToe
};