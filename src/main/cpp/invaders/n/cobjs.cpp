// This library is distributed in  the hope that it will be useful but without
// any  warranty; without  even  the  implied  warranty of  merchantability or
// fitness for a particular purpose.
// The use and distribution terms for this software are covered by the Eclipse
// Public License 1.0  (http://opensource.org/licenses/eclipse-1.0.php)  which
// can be found in the file epl-v10.html at the root of this distribution.
// By using this software in any  fashion, you are agreeing to be bound by the
// terms of this license. You  must not remove this notice, or any other, from
// this software.
// Copyright (c) 2013-2015, Ken Leung. All rights reserved.

#include "cobjs.h"
NS_ALIAS(cx, fusilli::ccsx)
NS_BEGIN(invaders)

//////////////////////////////////////////////////////////////////////////////
//
AlienSquad::AlienSquad(const s::vector<Alien>& aliens, int stepx)
  : AlienSquad() {
  this->aliens=aliens;
  this->stepx=step;
}

//////////////////////////////////////////////////////////////////////////////
//
AlienSquad::AlienSquad() {
}

//////////////////////////////////////////////////////////////////////////////
//
AlienSquad::~AlienSquad() {
}

//////////////////////////////////////////////////////////////////////////////
//
Alien::Alien(c::Sprite* s, int value, int rank)
  : ComObj(s, 1, value) {
  this->rank=rank;
}

//////////////////////////////////////////////////////////////////////////////
//
Alien::~Alien() () {
}

//////////////////////////////////////////////////////////////////////////////
//
Alien::Alien() () {
}

//////////////////////////////////////////////////////////////////////////////
Bomb::Bomb(c::Sprite* s) : ComObj(s) {
  auto wz= cx::VisRect();
  this->vel= Vec2(0, -50 * wz.height / 480);
}

//////////////////////////////////////////////////////////////////////////////
//
Bomb::~Bomb() {

}

//////////////////////////////////////////////////////////////////////////////
//
Bomb::Bomb() {

}

//////////////////////////////////////////////////////////////////////////////
//
Cannon::Cannon(float coolDownWindow) {
  this->coolDownWindow= coolDownWindow;
  hasAmmo = true;
};

//////////////////////////////////////////////////////////////////////////////
//
Cannon::Cannon()
  : coolDownWindow(0)
  , hasAmmo(false) {
}

//////////////////////////////////////////////////////////////////////////////
//
Cannon::~Cannon() {

}

//////////////////////////////////////////////////////////////////////////////
//
Explosion::Explosion(c::Sprite* s) : ComObj(s) {
  frameTime= 0.1;
}

//////////////////////////////////////////////////////////////////////////
//
Explosion::Explosion()
  : frameTime(0) {
}

//////////////////////////////////////////////////////////////////////////
//
Explosion::~Explosion() {
}

//////////////////////////////////////////////////////////////////////////////
//
void Explosion::Inflate(float x, float y) {
  auto anim= c::Animation::create();
  anim->addSpriteFrame(cx::GetSpriteFrame("boom_0.png"));
  anim->addSpriteFrame(cx::GetSpriteFrame("boom_1.png"));
  anim->addSpriteFrame(cx::GetSpriteFrame("boom_2.png"));
  anim->addSpriteFrame(cx::GetSpriteFrame("boom_3.png"));
  anim->setDelayPerUnit(frameTime);

  sprite->setPosition(x,y);
  status=true;
  sprite->runAction(
    c::Sequence::createWithTwoActions(c::Animate::create(anim),
    c::CallFunc::create([=]() { this->Deflate(); })));
}

//////////////////////////////////////////////////////////////////////////////
Looper::Looper(int count) {
  timers= nullptr; //sjs.makeArray(count,null);
}

//////////////////////////////////////////////////////////////////////////////
Looper::Looper()
  : timers(nullptr) {
}

//////////////////////////////////////////////////////////////////////////////
Looper::~Looper() {
}

//////////////////////////////////////////////////////////////////////////////
//
Missile::Missile(c::Sprite* s) : ComObj(s) {
  auto wz= cx::VisRect();
  this->vel= c::Vec2(0, 150 * wz.height / 480);
}

//////////////////////////////////////////////////////////////////////////////
//
Missile::Missile() {
}

//////////////////////////////////////////////////////////////////////////////
//
Missile::~Missile() {
}

//////////////////////////////////////////////////////////////////////////////
//
Motion::Motion()
  : right(false)
  , left(false) {
}

//////////////////////////////////////////////////////////////////////////
//
Motion::~Motion() {

}

//////////////////////////////////////////////////////////////////////////////
//
Ship::Ship(c::Sprite* s, const stdstr& f1, const stdstr& f2)
  : ComObj(s) {
  this->f1 = f1;
  this->f2= f2;
}

//////////////////////////////////////////////////////////////////////////
//
Ship::Ship() {
}

//////////////////////////////////////////////////////////////////////////
//
Ship::~Ship() {
}

//////////////////////////////////////////////////////////////////////////////
//
Velocity::Velocity(float vx, float vy) {
  x= vx;
  y= vy;
}

//////////////////////////////////////////////////////////////////////////////
//
Velocity::Velocity()
  : x(0)
  , y(0) {

}

//////////////////////////////////////////////////////////////////////////////
//
Velocity::~Velocity() {

}



NS_END(invaders)


